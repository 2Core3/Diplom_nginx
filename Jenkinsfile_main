pipeline {
    agent any
    
    environment {
        DOCKER_REPO = "1core2"
    }
    
    stages {
        
        
        stage('Build and Tag') {
            steps {
                script {
                    def dockerJobTag = "${env.JOB_NAME.toLowerCase()}"
                    def dockerBuildTag = "${dockerJobTag}:${BUILD_ID}"
                    def dockerTargetTag = "${DOCKER_REPO}/${dockerJobTag}:${BUILD_ID}"
                    
                    sh "docker rm -f my-image || true"
                    sh "docker image build -t ${dockerBuildTag} ."
                    sh "docker tag ${dockerBuildTag} ${dockerTargetTag}"
                }
            }
        }
        
        stage('Run') {
            steps {
                script {
                    def dockerTargetTag = "${DOCKER_REPO}/${env.JOB_NAME.toLowerCase()}:${BUILD_ID}"
                    sh "docker run -d -p 80:80 --name my-image ${dockerTargetTag}"

                    def originalIP = sh(script: "hostname -I | awk '{print \$1}'", returnStdout: true).trim()
                    def CONTAINER_IP = originalIP.replaceAll(/(\d+\.\d+\.\d+\.)(\d+)/, '$1' + '2')
                    def HOST_IP = originalIP.replaceAll(/(\d+\.\d+\.\d+\.)(\d+)/, '$1' + '1')
            
                    env.HOST_IP = HOST_IP
                    env.CONTAINER_IP = CONTAINER_IP        
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    sh "curl ${env.CONTAINER_IP}:80"
                    def expectedOutput = sh(script: "curl ${env.CONTAINER_IP}:80", returnStdout: true).trim()
                    def indexHtmlContent = sh(script: "curl ${env.CONTAINER_IP}:80/index.html", returnStdout: true).trim()
                    
                    if (expectedOutput == indexHtmlContent) {
                        echo "Output matches index.html content"
                    } else {
                        error "Output does not match index.html content"
                    }
                }
            }
        }
        
        stage('Push') {
            steps {
                script {
                    def dockerJobTag = "${env.JOB_NAME.toLowerCase()}"
                    def dockerBuildTag = "${dockerJobTag}:${BUILD_ID}"
                    def dockerTargetTag = "${DOCKER_REPO}/${dockerJobTag}:${BUILD_ID}"
                    
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"
                        sh "docker push ${dockerTargetTag}"
                        sh "docker tag ${dockerTargetTag} ${DOCKER_REPO}/${dockerJobTag}:latest"
                        sh "docker push ${DOCKER_REPO}/${dockerJobTag}:latest"
                        sh "docker logout"
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws_ssh', keyFileVariable: 'SSH_KEY')]) {
                        def catOutput = sh(script: """
                        ssh -i $SSH_KEY -o StrictHostKeyChecking=no ubuntu@${HOST_IP} 'cat /home/ubuntu/ip_server_nginx'
                        """, returnStdout: true).trim()
                        env.IP = catOutput
                        sh """
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@${env.IP} 'bash /home/ubuntu/scripts_rm_and_push.sh'
                        """
                    }
                }
            }
        }
        
        stage('Clean') {
            steps {
                script {
                    sh "docker stop my-image || true"
                    sh "docker rm my-image || true"
                }
            }
        }
    }
    
    post {
        failure {
            script {
                def message = "*${env.JOB_NAME}* : Pipeline Failed."
                withCredentials([string(credentialsId: 'telegram_id', variable: 'CHAT_ID'), string(credentialsId: 'telegram_api', variable: 'API_TOKEN')]) {
                    sh """
                    curl -s -X POST https://api.telegram.org/bot${API_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='${message}' 
                    """
                }
            }
        }
        success {
            script {
                def message = "*${env.JOB_NAME}* : Pipeline Succeeded."
                withCredentials([string(credentialsId: 'telegram_id', variable: 'CHAT_ID'), string(credentialsId: 'telegram_api', variable: 'API_TOKEN')]) {
                    sh """
                    curl -s -X POST https://api.telegram.org/bot${API_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='${message}' 
                    """
                }
            }
        } 
    }
}
